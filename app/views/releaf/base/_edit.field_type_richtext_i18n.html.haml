:ruby
  label_opts  = get_template_label_options    local_assigns, { :translation_name => name.sub(/_html$/, '').to_s }
  input_attrs = get_template_input_attributes local_assigns, { :rows => 5, :cols => 75, :class => "richtext" }
  field_attrs = get_template_field_attributes local_assigns

  default_locale = Settings.i18n_locales.first

.field.type_richtext.i18n{field_attrs}
  - Settings.i18n_locales.each_with_index do |locale, i|
    - translation = f.object.translations.find_or_initialize_by_locale(locale)
    - is_default_locale = locale == default_locale

    .localization{:"data-locale" => locale, :style => is_default_locale ? nil : 'display:none'}
      = f.fields_for :"translations", translation, :child_index => i do |ff|
        = render "edit.field_label", label_opts.merge(:f => ff)
        .value
          - unless translation.new_record?
            = ff.hidden_field :id
          = ff.hidden_field :locale
          = ff.text_area name, input_attrs
        .clear

  .localization_buttons
    - Settings.i18n_locales.each_with_index do |locale, i|
      - is_default_locale = locale == default_locale
      %button{:type => :button, :"data-locale" => locale, :class => is_default_locale ? :active : nil}= locale

  = render "edit.field_errors", :f => f, :name => name
  .clear
